{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYbz4zsDzx+tW0j6Zk0+MR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Krishnakarthik27/AIlab/blob/main/Adversarial%20ML%20Lab%3A%20Attack%20and%20Defense%20on%20MNIST\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ntL5Qx0ZPhOw",
        "outputId": "6cce3a5e-b416-4f16-f390-fce5bb7e7bf9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting adversarial-robustness-toolbox\n",
            "  Downloading adversarial_robustness_toolbox-1.19.1-py3-none-any.whl.metadata (11 kB)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: numpy>=1.18.0 in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (1.15.3)\n",
            "Requirement already satisfied: scikit-learn>=0.22.2 in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (1.6.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (1.17.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (75.2.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from adversarial-robustness-toolbox) (4.67.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.4)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.13.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.71.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.13.0)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.9)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.15.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.4.26)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.22.2->adversarial-robustness-toolbox) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.22.2->adversarial-robustness-toolbox) (3.6.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.8)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n",
            "Downloading adversarial_robustness_toolbox-1.19.1-py3-none-any.whl (1.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m16.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: adversarial-robustness-toolbox\n",
            "Successfully installed adversarial-robustness-toolbox-1.19.1\n"
          ]
        }
      ],
      "source": [
        "!pip install adversarial-robustness-toolbox tensorflow matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.datasets import mnist\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from art.attacks.evasion import FastGradientMethod\n",
        "from art.estimators.classification import TensorFlowV2Classifier"
      ],
      "metadata": {
        "id": "eh-CYeEPQ4eC"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load MNIST dataset\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
        "\n",
        "# One-hot encode labels\n",
        "y_train_cat = to_categorical(y_train, 10)\n",
        "y_test_cat = to_categorical(y_test, 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdYSNmRVRD4N",
        "outputId": "a0190fa2-b2be-46d8-c444-4c30a5c1022d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the model\n",
        "model = Sequential([\n",
        "    Flatten(input_shape=(28, 28)),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.fit(x_train, y_train_cat, epochs=5, validation_data=(x_test, y_test_cat))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qjVEACeFRP_u",
        "outputId": "992ce2f2-84e9-46dc-e735-6cd9696747bd"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.8822 - loss: 0.4227 - val_accuracy: 0.9539 - val_loss: 0.1563\n",
            "Epoch 2/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9631 - loss: 0.1252 - val_accuracy: 0.9709 - val_loss: 0.1007\n",
            "Epoch 3/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.9773 - loss: 0.0767 - val_accuracy: 0.9749 - val_loss: 0.0803\n",
            "Epoch 4/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.9841 - loss: 0.0541 - val_accuracy: 0.9753 - val_loss: 0.0773\n",
            "Epoch 5/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9866 - loss: 0.0432 - val_accuracy: 0.9718 - val_loss: 0.0941\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7cb3c7844210>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from art.estimators.classification import TensorFlowV2Classifier\n",
        "\n",
        "classifier = TensorFlowV2Classifier(\n",
        "    model=model,\n",
        "    nb_classes=10,\n",
        "    input_shape=(28, 28),\n",
        "    loss_object=tf.keras.losses.CategoricalCrossentropy()\n",
        ")"
      ],
      "metadata": {
        "id": "8ZEq0OUiRuXg"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "attack = FastGradientMethod(estimator=classifier, eps=0.2)\n",
        "x_test_adv = attack.generate(x=x_test)\n",
        "\n",
        "# Evaluate model on adversarial examples\n",
        "preds = classifier.predict(x_test_adv)\n",
        "acc = np.sum(np.argmax(preds, axis=1) == y_test) / len(y_test)\n",
        "print(f\"Accuracy on adversarial test set: {acc * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jLzHCDqLRzU5",
        "outputId": "5193404c-a38a-4c92-e5f0-abc0983213bc"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on adversarial test set: 2.54%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 2))\n",
        "for i in range(10):\n",
        "    plt.subplot(1, 10, i+1)\n",
        "    plt.imshow(x_test_adv[i], cmap='gray')\n",
        "    plt.title(f\"Adv\")\n",
        "    plt.axis('off')\n",
        "plt.suptitle(\"Adversarial Examples\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "obaMyRh9R85u",
        "outputId": "d80a6e2b-8a2c-40f4-c3d5-a8dce594ef4b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x200 with 10 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxoAAACVCAYAAADfTozCAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAwmVJREFUeJzsvXeQbGd5Jv6czjn39OSePDfMVUAChAwIBJgggTEGBMYLGHu9XozLbNnetbfWP9tLcC0Ydl0uMGuD5SSXSIKyKduACWtAQigg6ca5M3Mnp56O0zme3x9T73u/c/p0T3dPXwnweaqmpNvh9Hfe837hTc8rybIsQ4cOHTp06NChQ4cOHTr6CMNzPQAdOnTo0KFDhw4dOnT85EE3NHTo0KFDhw4dOnTo0NF36IaGDh06dOjQoUOHDh06+g7d0NChQ4cOHTp06NChQ0ffoRsaOnTo0KFDhw4dOnTo6Dt0Q0OHDh06dOjQoUOHDh19h25o6NChQ4cOHTp06NCho+/QDQ0dOnTo0KFDhw4dOnT0HbqhoUOHDh06dOjQoUOHjr5DNzR06NDxE42/+qu/giRJWFtbe66HckMhSRL+4A/+oOvvffvb34YkSfj2t7/d9zH9uEGXhQ4dOnT0F7qhoUOHjh8LfPKTn4QkSXjhC1/4XA/l3yXIYGv19/3vf/+5HqIOHTp06PgRg+m5HoAOHTp0dIIHHngAExMT+MEPfoDl5WXMzMw810P6kUKxWITJdOOX9P/5P/8nJicnm17Xn4cOHTp06FBDNzR06NDxI4/V1VU8/PDDeOihh/Cf/tN/wgMPPIDf//3ff66H1RaFQgEOh+OG/kaj0UClUoHNZoPNZruhv0V47Wtfi9tvv/1Z+S0dOnTo0PHjDT11SocOHT/yeOCBB+D3+3HPPffgzW9+Mx544AHNz128eBF333037HY7RkdH8cEPfhCNRkPxmXvvvRdTU1Oa33/Ri17UdIj+u7/7O9x2222w2+0IBAJ429vehs3NTcVnXvayl2FhYQFPPPEEXvrSl8LhcOC///f/DgB4/PHH8epXvxqhUAh2ux2Tk5N4z3veo/j+H//xH+POO+9EMBiE3W7Hbbfdhi984QtN45MkCe973/vwwAMP4OzZs7BarfiXf/kXfk+s0VhfX8d73/tezM/Pw263IxgM4i1vecsNr1X5/d//fRgMBnzjG99QvP4rv/IrsFgsePrppwEAlUoF/9//9//htttug9frhdPpxEte8hJ861vfUnxvbW0NkiThj//4j/GJT3wCU1NTcDgc+Omf/mlsbm5ClmV84AMfwOjoKOx2O37mZ34GyWRScY2JiQnce++9+NrXvoZbbrkFNpsNZ86cwUMPPdTRPT366KN4zWteA6/XC4fDgbvuugvf+973FJ/JZrN4//vfj4mJCVitVgwMDOBVr3oVnnzyyW5FqEOHDh0/MdAjGjp06PiRxwMPPIA3velNsFgsePvb344/+7M/w2OPPYbnP//5/Jm9vT28/OUvR61Ww+/8zu/A6XTiz//8z2G32xXXuu+++/DOd76z6fvr6+v4/ve/j49+9KP82oc+9CH83u/9Ht761rfil3/5l3FwcIA//dM/xUtf+lL88Ic/hM/n488mEgm89rWvxdve9jb8wi/8AiKRCGKxGH76p38a4XAYv/M7vwOfz4e1tbWmA+6f/Mmf4A1veAPe8Y53oFKp4MEHH8Rb3vIWfOUrX8E999yj+Ow3v/lNfO5zn8P73vc+hEIhTExMaMrssccew8MPP4y3ve1tGB0dxdraGv7sz/4ML3vZy3Dp0qWeoy2ZTAbxeFzxmiRJCAaDAID/8T/+B/7xH/8Rv/RLv4Tz58/D7Xbjq1/9Kv7iL/4CH/jAB3DzzTcDAA4PD/HpT38ab3/72/Ef/+N/RDabxWc+8xm8+tWvxg9+8APccsstit944IEHUKlU8Ou//utIJpP4yEc+gre+9a24++678e1vfxv/7b/9NywvL+NP//RP8Vu/9Vv4y7/8S8X3l5aWcN999+FXf/VX8a53vQv3338/3vKWt+Bf/uVf8KpXvarl/X7zm9/Ea1/7Wtx2221sRN1///24++678Z3vfAcveMELAAC/+qu/ii984Qt43/vehzNnziCRSOC73/0uLl++jOc973k9yVqHDh06fuwh69ChQ8ePMB5//HEZgPz1r39dlmVZbjQa8ujoqPwbv/Ebis+9//3vlwHIjz76KL8Wi8Vkr9crA5BXV1dlWZblTCYjW61W+Td/8zcV3//IRz4iS5Ikr6+vy7Isy2tra7LRaJQ/9KEPKT53/vx52WQyKV6/6667ZADypz71KcVnv/SlL8kA5Mcee6ztPRYKBcW/K5WKvLCwIN99992K1wHIBoNBvnjxYtM1AMi///u/3/KasizLjzzyiAxA/pu/+Rt+7Vvf+pYMQP7Wt77Vdoz333+/DEDzz2q1Kj57/vx52WKxyL/8y78sp1IpeWRkRL799tvlarXKn6nVanK5XFZ8L5VKyZFIRH7Pe97Dr62ursoA5HA4LKfTaX79d3/3d2UA8s0336y47tvf/nbZYrHIpVKJX4tGozIA+Ytf/CK/lslk5KGhIfnWW29tKYtGoyHPzs7Kr371q+VGo8GfKxQK8uTkpPyqV72KX/N6vfKv/dqvtZWhDh06dPx7g546pUOHjh9pPPDAA4hEInj5y18O4Mh7ft999+HBBx9EvV7nz/3TP/0T7rjjDvYwA0A4HMY73vEOxfU8Hg9e+9rX4nOf+xxkWebXP/vZz+KOO+7A+Pg4AOChhx5Co9HAW9/6VsTjcf4bHBzE7OxsU4qP1WrFL/7iLypeo4jHV77yFVSr1Zb3KEZdUqkUMpkMXvKSl2im3dx11104c+ZMy2tpXbNarSKRSGBmZgY+n+9E6Tyf+MQn8PWvf13x98///M+KzywsLOAP//AP8elPfxqvfvWrEY/H8dd//deKYnWj0QiLxQLgqNYkmUyiVqvh9ttv1xzfW97yFni9Xv43sY/9wi/8guK6L3zhC1GpVLC9va34/vDwMH72Z3+W/+3xePDOd74TP/zhD7G3t6d5r0899RSWlpbw8z//80gkEqwD+Xwer3jFK/Bv//ZvnJrn8/nw6KOPYmdnpyM56tChQ8e/B+ipUzp06PiRRb1ex4MPPoiXv/zlWF1d5ddf+MIX4mMf+xi+8Y1v4Kd/+qcBHKU+aVHfzs/PN71233334ctf/jIeeeQR3HnnnVhZWcETTzyB//N//g9/ZmlpCbIsY3Z2VnNsZrNZ8e+RkRE+OBPuuusu/NzP/Rz+8A//EP/7f/9vvOxlL8Mb3/hG/PzP/zysVit/7itf+Qo++MEP4qmnnkK5XObXJUlq+l0txictFItF/NEf/RHuv/9+bG9vK4yqTCbT0TW08IIXvKCjYvDf/u3fxoMPPogf/OAH+PCHP6xpHP31X/81Pvaxj+HKlSsKQ0zrHskAJJDRMTY2pvl6KpVSvD4zM9Mkz7m5OQBHdSCDg4NNv7m0tAQAeNe73qV9kziSpd/vx0c+8hG8613vwtjYGG677Ta87nWvwzvf+c6W9UA6dOjQ8e8BuqGhQ4eOH1l885vfxO7uLh588EE8+OCDTe8/8MADbGh0g9e//vVwOBz43Oc+hzvvvBOf+9znYDAY8Ja3vIU/02g0IEkS/vmf/xlGo7HpGi6XS/FvdS0IcGQofOELX8D3v/99/OM//iO++tWv4j3veQ8+9rGP4fvf/z5cLhe+853v4A1veANe+tKX4pOf/CSGhoZgNptx//334+///u+brqn1O1r49V//ddx///14//vfjxe96EXwer2QJAlve9vbmgrkbwSuXbvGB/Xz5883vf93f/d3ePe73403vvGN+O3f/m0MDAzAaDTij/7oj7CystL0ea1n0O510bDqFSSnj370o001IwTSg7e+9a14yUtegi996Uv42te+ho9+9KP4X//rf+Ghhx7Ca1/72hOPRYcOHTp+HKEbGjp06PiRxQMPPICBgQF84hOfaHrvoYcewpe+9CV86lOfgt1uRzQa5YOtiMXFxabXnE4n7r33Xnz+85/Hxz/+cXz2s5/FS17yEgwPD/NnpqenIcsyJicn2fPdK+644w7ccccd+NCHPoS///u/xzve8Q48+OCD+OVf/mV88YtfhM1mw1e/+lVFlOP+++8/0W9+4QtfwLve9S587GMf49dKpRLS6fSJrtsJGo0G3v3ud8Pj8eD9738/PvzhD+PNb34z3vSmNynGNzU1hYceekgRabhRtMXLy8uQZVnxW1evXgWAlgX109PTAI7SrF75ylce+xtDQ0N473vfi/e+972IxWJ43vOehw996EO6oaFDh45/t9BrNHTo0PEjiWKxiIceegj33nsv3vzmNzf9ve9970M2m8U//MM/AABe97rX4fvf/z5+8IMf8DUODg5aUuHed9992NnZwac//Wk8/fTTuO+++xTvv+lNb4LRaMQf/uEfNnnHZVlGIpE49h5SqVTTd8kzTilSRqMRkiQp6k3W1tbw5S9/+djrt4PRaGz67T/90z9V/M6Nwsc//nE8/PDD+PM//3N84AMfwJ133on//J//s4KtiiIR4hgfffRRPPLIIzdkTDs7O/jSl77E/z48PMTf/M3f4JZbbtFMmwKA2267DdPT0/jjP/5j5HK5pvcPDg4AHKX4qdPRBgYGMDw8rEiF06FDh45/b9AjGjp06PiRxD/8wz8gm83iDW94g+b7d9xxB8LhMB544AHcd999+K//9b/ib//2b/Ga17wGv/Ebv8H0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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate adversarial training data\n",
        "x_train_adv = attack.generate(x=x_train)\n",
        "\n",
        "# Combine with clean data\n",
        "x_train_comb = np.concatenate((x_train, x_train_adv))\n",
        "y_train_comb = np.concatenate((y_train_cat, y_train_cat))\n",
        "\n",
        "# Retrain model\n",
        "model.fit(x_train_comb, y_train_comb, epochs=5, validation_data=(x_test, y_test_cat))\n",
        "\n",
        "# Evaluate again\n",
        "classifier = TensorFlowV2Classifier(\n",
        "    model=model,\n",
        "    nb_classes=10,\n",
        "    input_shape=(28, 28),\n",
        "    loss_object=tf.keras.losses.CategoricalCrossentropy()\n",
        ")\n",
        "\n",
        "preds_defended = classifier.predict(x_test_adv)\n",
        "acc_defended = np.sum(np.argmax(preds_defended, axis=1) == y_test) / len(y_test)\n",
        "print(f\"Accuracy after defense: {acc_defended * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o79wKnZbSBDB",
        "outputId": "7761d9b9-9d7c-461e-e75a-1b27510b546c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m3750/3750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 4ms/step - accuracy: 0.9213 - loss: 0.4915 - val_accuracy: 0.9753 - val_loss: 0.0796\n",
            "Epoch 2/5\n",
            "\u001b[1m3750/3750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 4ms/step - accuracy: 0.9858 - loss: 0.0523 - val_accuracy: 0.9777 - val_loss: 0.0718\n",
            "Epoch 3/5\n",
            "\u001b[1m3750/3750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 4ms/step - accuracy: 0.9903 - loss: 0.0337 - val_accuracy: 0.9760 - val_loss: 0.0745\n",
            "Epoch 4/5\n",
            "\u001b[1m3750/3750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 4ms/step - accuracy: 0.9924 - loss: 0.0256 - val_accuracy: 0.9766 - val_loss: 0.0756\n",
            "Epoch 5/5\n",
            "\u001b[1m3750/3750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 4ms/step - accuracy: 0.9942 - loss: 0.0194 - val_accuracy: 0.9783 - val_loss: 0.0694\n",
            "Accuracy after defense: 97.71%\n"
          ]
        }
      ]
    }
  ]
}